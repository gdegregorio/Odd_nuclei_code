       program Hamiltonian
  

       use technical
       use geom

       include 'define.inc'
       include 'parameters.inc'
       include 'commons.inc'
       
       double precision, allocatable, save ::ham(:,:),wro(:),Vin(:)
       double precision, allocatable, save :: wr(:),wi(:),vr(:,:)
       double precision, allocatable, save :: dmat1(:,:),term(:)
       double precision, allocatable, save :: vll(:,:),vx(:,:)
       double precision :: vec,fatt,somm,val
       integer :: ii,io,pp,alfa,ialfa,jalfa,palfa,imax
       integer :: lam,lamp,jl1,jl,ak
     
      call input
      call Finteraction

      call permut(dimbas,dmat,mxt)

      call xmatr

       allocate(Vin(dimbas))
       allocate(term(no))  
        term=0.d0
        Vin=0.d0

        open(897,file='H02.dat',status='unknown',form='formatted')

        do io=1,dimbas
        write(*,*) io,'of',dimbas
         ii=mxt1(io)
         pp=bas(ii)%ir
         alfa=bas(ii)%ilam
         ialfa=ph2(alfa)%alfa
         jalfa=ph2(alfa)%J
         palfa=ph2(alfa)%par

        nop=dime2ph(palfa,jalfa)

        if(allocated(phonbs)) deallocate(phonbs)

        if(allocated(xx)) deallocate(xx)
        if(allocated(vll)) deallocate(vll)

        allocate(phonbs(3*nop))

        allocate(xx(num_ph,num_ph))
        allocate(vll(num_ph,num_ph))
        xx=0.d0
        call ph2_x(palfa,Jalfa,nop,ialfa,xx,phonbs,imax)

!*********************************************************
        call Vinteraction(pp,jalfa,vll)
        if(allocated(vx)) deallocate(vx)

        allocate(vx(num_ph,num_ph))
        vx=0.d0
         call DGEMM('N','N',num_ph,num_ph,num_ph,1.d0,vll,max(1,num_ph),
     &        xx,max(1,num_ph),0.d0,vx,max(1,num_ph))

        somm=0.d0

        do ll=1,num_ph
         somm=somm+vx(ll,ll)
        end do

!**********************************************************
        Vin(ii)=somm
        end do

!**********************************************************
        do jj=1,no
          val=0.d0
          do kk=1,no
          val=val+Vin(kk)*eigv(kk,jj)
          end do
        term(jj)=(1.d0/(dble(levp(iv)%j2)+1)**0.5d0)*val
        write(897,*) jj,term(jj)
        end do
         close(897)
!***********************************************************
        write(*,*) 'Hamiltonian'
       allocate(ham(no+1,no+1))
         ham=0.d0
         ham(1,1)=levp(iv)%ei
        do i=2,no+1
          ham(i,1)=term(i-1)
          ham(1,i)=term(i-1)
          ham(i,i)=eigen(i-1)
        end do

        open(312,file='DAD+coup.dat',status='unknown',form='formatted')
       do i=1,no+1
        do j=1,no+1
         write(312,*) i,j,ham(i,j)
        end do
       end do
        close(312)
       allocate(wr(no+1),wi(no+1),vr(no+1,no+1))
 
       wr=0.d0
       wi=0.d0 
       vr=0.d0
  
      call diagonalization(ham,wr,wi,vr,no+1)
      
      open(334,file='eigencoup.dat',status='unknown',form='formatted')
      open(335,file='ordeigcoup.dat',status='unknown',form='formatted')
       write(334,*)'spettro di',levp(iv)%j2,(-1)**levp(iv)%l,'ev=', 
     &  levp(iv)%ei
       write(335,*)'spettro di',levp(iv)%j2,(-1)**levp(iv)%l,'ev=', 
       do i=1,no+1
         write(334,*) i,wr(i),wi(i)
        do j=1,no+1
        write(33,*) i,j,vr(j,i)
       end do
        end do
      open(22,file='struct_coup.dat',status='unknown',form='formatted')

      open(222,file='toteigv.dat',status='unknown',form='formatted')
       write(222,*) no+1
       do ii=1,no+1
       if(dabs(wr(ii)).lt.30.d0) then
        write(22,*)'***************************'
        write(22,*) ii,wr(ii)
        write(22,*)'***************************'
        write(22,*)'v,c,c^2'
        write(22,*) 1,vr(1,ii),vr(1,ii)**2
         do j=2,no+1      
          if(dabs(vr(j,ii)).gt.0.01)then
           write(22,*) j,vr(j,ii),vr(j,ii)**2
          end if
         end do    
        end if
        end do
       do ii=1,no+1
        write(222,*) 1,ii,vr(1,ii)
         do j=2,no+1
          write(222,*) j,ii,vr(j,ii)  
         end do
       end do
    
       allocate(wro(no+1))
       call order(wr,no+1,wro)
        do i=1,no+1
         write(335,*) i,wro(i)
       end do
       close(222)
       close(334)
       close(335)


       contains

!***********************************************************************
!***********************************************************************
!***********************************************************************
       subroutine permut(ndim,matr,mxt)

      implicit double precision (a-h,o-z)

      double precision, dimension(:,:), allocatable :: matr
      double precision, dimension(:), allocatable :: work
      integer, dimension(:), allocatable :: mxt,nxt

      allocate (work(ndim))
      work=0.d0
      allocate(nxt(ndim))

      do i=1,ndim
       nxt(i)=i
      enddo

      do i=1,ndim
       work(:)=matr(i,:)
       do j=i,ndim
        if (nxt(j).eq.mxt(i)) then
        matr(i,:)=matr(j,:)
        matr(j,:)=work(:)
        nxt(j)=nxt(i)
        nxt(i)=mxt(i)
       endif
       enddo
      enddo

      do i=1,ndim
       nxt(i)=i
      enddo

      do i=1,ndim
       work(:)=matr(:,i)
       do j=i,ndim
        if (nxt(j).eq.mxt(i)) then
        matr(:,i)=matr(:,j)
        matr(:,j)=work(:)
        nxt(j)=nxt(i)
        nxt(i)=mxt(i)
        endif
       enddo
      enddo



      deallocate(work)

      return
      end subroutine
!***************************************************************************
!***************************************************************************
!***************************************************************************

      subroutine diagonalization(A,er,ei,v,i)

       include 'define.inc'

       double precision :: A(i,i),er(i),ei(i),v(i,i)
       double precision :: wor(max(1,6*i))

       icou1=max(1,6*i)
      er=0.d0
      ei=0.d0
      v=0.d0
      call DGEEV('N','V',i,A,max(1,i),er,ei,vl,
     &       max(1,i),v,max(1,i),wor,icou1,info)

       if(info.ne.0) then
        write(*,*) 'The diagonalization failed!!!'
        stop
       endif

       return
      end SUBROUTINE
!********************************************************************************
!********************************************************************************


        subroutine order(vec,mm,wro)

        integer ::mm,ipoz(mm) 
        double precision ::vec(mm)
        double precision, allocatable :: wro(:)
         !allocate(wro(mm))
        
        
      do i=1,mm

        ipoz(i)=i

        wro(i)=vec(i)

      enddo



      do i=1,mm

        do j=1,mm-i

          if (wro(j).gt.wro(j+1)) then

            xe=wro(j)

            wro(j)=wro(j+1)

            wro(j+1)=xe

            ipozz=ipoz(j)

            ipoz(j)=ipoz(j+1)

            ipoz(j+1)=ipozz

      endif

      enddo

      enddo
       return
      end subroutine  
!**************************************************************

     
!************************************************************** 
!**************************************************************   
       subroutine ph2_x(ipar,ijj,idi,jj,xmat,phonbss,f)!,vec,int2)

       include 'commons.inc'
    

       integer :: idmax,ipar,ijj,idi        !dimension of TDA matrix
       integer :: a,b,c,e,f,g,int2,jj
       double precision :: dd,hh
       integer :: i,j,k,ila,ilap,kk,ll         !service variables
       double precision :: val,w !service variable     
       character :: ch5
       character*2 :: ch6
       TYPE(indbas2ph_type),dimension(:),allocatable :: phonbss
       !TYPE(ph2input_type),
        double precision,dimension(:,:),allocatable ::xmat

       if(allocated(phonbss)) deallocate(phonbss)
       if(allocated(xmat)) deallocate(xmat)

        if(ipar.eq.1) ch5='1'
        if(ipar.eq.-1)ch5='0'
555    format(i2.2)
       write(ch6,555) ijj

      open(12,file='2ph/x_'//ch5//'_'//ch6//'.out',
     &             status='old',form='unformatted')
      read(12) int1

      f=int1
      Allocate(phonbss(f))
      Allocate(xmat(num_ph,num_ph))


      xmat=0.d0
      phonbs%ila=0
      phonbs%ilap=0
       do while(.not.eof(12))! aa=1,idi
!       ll=1
       read(12) e,c,a,b,val
       if(c.eq.jj) then
       !kk=1
       !if(dabs(val).gt.0d0) then
       phonbss(e)%ila=a
       phonbss(e)%ilap=b
       xmat(b,a)=val

       !end if
       end if
        end do
!        ll=ll-1
        close(12)

       return
       end subroutine
!**************************************************************
!**************************************************************
!**************************************************************    


       subroutine Vinteraction(aa,bb,vl)

!********************************************************************
!this program generate the interaction part of EMPM for odd nuclei
!********************************************************************

       use technical
       use geom

       include 'define.inc'
       include 'parameters.inc'
       include 'commons.inc'
 
       integer :: ii,jj,kk,ll,aa,bb,jl1,jl2
       double precision :: val,fatt
       double precision, allocatable :: vl(:,:)

       open(22,file='int_par.dat',status='old',form='unformatted')
!       if(allocated(vl)) deallocate(!vl)

!       Allocate(vl(num_ph,num_ph))
       vl=0.d0
       do while(.not.eof(22))
        read(22) ii,jj,kk,ll,val
         if(ii.eq.aa.and.ll.eq.bb) then
         jl1=ph(jj)%Jph
         jl2=ph(kk)%Jph
         fatt=((2*jl1+1)*(2*jl2+1))**0.5d0
         vl(jj,kk)=-fatt*val
         end if
       end do
       close(22)
       return

        end subroutine 
      end program
